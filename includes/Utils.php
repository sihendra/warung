<?php
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Util
 *
 * @author hendra
 */
class Utils {
    /**
     * Parse multiline json string into json object array
     * @param String $s_content json string
     * @param Boolean $b_generate_id if set to true 'id' properties will be added with autogenerated values for each json object
     * @return Array of json object
     */
    public static function parseJsonMultiline($s_content, $b_generate_id=true) {
        $s_content = str_replace('\\"', '"', $s_content);

        $a_ret = explode("\n", $s_content);
        $i = 0;
        foreach ($a_ret as &$r) {
            if ($b_generate_id) {
                $r = '{"id":' . $i++ . ',' . $r . '}';
            } else {
                $r = '{' . $r . '}';
            }
            $r = json_decode($r);
        }
        return $a_ret;
    }

    /**
     * Append url with get parameters in $param
     * @param String $url
     * @param Associative Arrays $param
     * @return String $url with appended parameter
     */
    public static function addParameter($url, $param) {
        $ret = $url;
        $qstr = '';
        $i = 0;
        foreach ($param as $key => $value) {
            if ($i++ == 0) {
                $qstr .= $key . '=' . $value;
            } else {
                $qstr .= '&' . $key . '=' . $value;
            }
        }
        if (strpos($url, '?')) {
            $ret = $url . '&' . $qstr;
        } else {
            $ret = $url . '?' . $qstr;
        }

        return $ret;
    }

    /**
     * Parse all input element with name $name_form_name and value $value_form_name into assoc array
     * example product_options_name-1="sprei" product_option_value-1="123"
     * will be parsed into array ( sprei => 123 )
     *
     * @param <type> $posts
     * @param <type> $name_form_name
     * @param <type> $value_form_name
     * @return Assoc Array
     */
    public static function parseNamevalParameters($posts, $name_form_name, $value_form_name) {
        $ret = array();

        $prev_idx = 0;
        $prev_name = '';
        foreach ($posts as $key => $val) {

            if (!empty($val)) {
                if (strpos($key, $name_form_name) !== false) {
                    $tok = explode('-', $key);
                    $prev_idx = $tok[1];
                    $prev_name = $val;
                } else if (strpos($key, $value_form_name) !== false) {
                    if (strlen(trim($prev_name)) > 0) {
                        $ret[$prev_name] = $val;
                    }
                }
            }
        }

        return $ret;
    }

    /**
     * Return object from post request with this format
     * prefix-name-1=val1
     * prefix-text-1=val2
     * prefix-text-2=val3
     * prefix_name-2=val4
     *
     * will return:
     *     array (
     *         obj {name:val1;text=val2},
     *         obj {name:val4;text=val2}
     *     );
     *
     * @param <type> $posts
     * @param <type> $name_prefix
     * @param <type> $value_form_name
     * @return <type>
     */
    public static function parseParametersToObject($posts, $name_prefix) {
        $ret = array();

        foreach ($posts as $key => $val) {
            if (!empty($val)) {
                // starts with prefix
                $pat = '/' . $name_prefix . '[-_]*(\w+)([-_]*(\d+))*/i';
                if (preg_match($pat, $key, $matches)) {
                    if (isset($matches[1]) && isset($matches[3])) {
                        if (empty($ret[intval($matches[3])])) {
                            $newObj = null;
                            $newObj->$matches[1] = $val;
                            $ret[intval($matches[3])] = $newObj;
                        } else {
                            $obj = $ret[intval($matches[3])];
                            $obj->$matches[1] = $val;
                        }
                    }
                }
            }
        }

        return $ret;
    }

    public static function ceilToThousand($n) {
        return Utils::ceilTo($n, 1000);
    }

    public static function ceilToHundred($n) {
        return Utils::ceilTo($n, 100);
    }

    public static function ceilTo($n, $rf) {

        if ($n / $rf > 1) {
            return ceil($n / $rf) * $rf;
        }
        return $n;
    }

    /**
     * Add currency sign and add period every thousand
     * @param number $price
     * @return string
     */
    public static function formatCurrency($price) {
        $wo = new WarungOptions();
        $currency = $wo->getCurrency();

        return trim($currency) . number_format($price, 0, ',', '.');
    }

    /**
     * Add weight sign and add period on thousand
     * @param number $weight
     * @return string
     */
    public static function formatWeight($weight) {
        $wo = new WarungOptions();
        $weight_sign =  $wo->getWeightSign();
        return number_format($weight, 1, ',', '.') . ' ' . trim($weight_sign);
    }
}
?>
